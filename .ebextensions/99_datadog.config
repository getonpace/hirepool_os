files:
  # Utility script to modify datadog-agent integration conf files
  "/tmp/write_datadog_confd.sh" :
    mode: "000755"
    content: |
      #!/usr/bin/env bash

      CONFIG_NAME=$1
      CONFIG_DIR="/etc/datadog-agent/conf.d/${CONFIG_NAME}.d"
      CONFIG_FILE="${CONFIG_DIR}/conf.yaml"
      AGENT_USER="dd-agent"
      AGENT_GROUP="$AGENT_USER"

      # Ensure destination directory exists
      sudo mkdir -m 755 -p "$CONFIG_DIR"

      # Ensure destination file exists and has correct permissions and ownership
      (umask 022; sudo touch "$CONFIG_FILE")
      sudo chown "${AGENT_USER}:${AGENT_GROUP}" "$CONFIG_FILE"

      # Redirect the contents of stdin into the $CONFIG_FILE
      sudo tee "$CONFIG_FILE" <&0 > /dev/null

  # Post init - start datadog-agent
  "/tmp/hooks/start_datadog.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      # 99_start_datadog.sh
      if [ -z "$(initctl -q status datadog-agent 2>&1)" ]; then
        initctl start datadog-agent
      fi

  # Pre init - stop datadog-agent
  "/tmp/hooks/stop_datadog.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      # 99_stop_datadog.sh
      if [ -z "$(initctl -q status datadog-agent 2>&1)" ]; then
        initctl stop datadog-agent
      fi

# Commands are run early in the deployment process, run before the application and web server
#  are set up and the application version file is extracted.  These are run as root from the
#  root user's home dir.
commands:

  # Install the datadog-agent, conditionally on the existence the DD_API_KEY environment variable
  #  and only if the agent has not already been installed (that is, there is no executable agent
  #  located at `/opt/datadog-agent/bin/agent/agent`).
  01-install-datadog-agent:
    env:
      DD_API_KEY:
        "Fn::GetOptionSetting":
          Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: DD_API_KEY
          DefaultValue: ''
      DD_INSTALL_ONLY: true
    command: bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
    test: '[ ! -x /opt/datadog-agent/bin/agent/agent -a -n "${DD_API_KEY:+x}" ]'
    ignoreErrors: true

  # Create a backup of the original `datadog.yaml` config file, so that various commands that follow have a common
  #  starting point for re-writing the config file setup on subsequent deploys or environment rebuilds.
  02-backup-datadog-config:
    test: '[ -e /etc/datadog-agent/datadog.yaml ]'
    command: sudo cp -n /etc/datadog-agent/datadog.yaml /etc/datadog-agent/datadog.yaml.original

  # Using the backup created in the previous step, create a copy with the commented out boilerplate config removed.
  03-cleanup-datadog-config-yaml:
    test: '[ -e /etc/datadog-agent/datadog.yaml.original ]'
    command: "sudo sed '/api_key: .*/{q}' /etc/datadog-agent/datadog.yaml.original > /etc/datadog-agent/datadog.yaml"

# Container commands are run later in the deployment process, after the application and web server
#  have been set up and the application version archive has been extracted, but before the application
#  version is deployed.  These are run as the `ec2-user` from the application staging folder.
container_commands:

  # Create folders for post hooks, if they don't exist already
  02-mkdir_restartappserver_post:
    test: '[ ! -d /opt/elasticbeanstalk/hooks/restartappserver/post ]'
    command: "mkdir -p /opt/elasticbeanstalk/hooks/restartappserver/post"
  02-mkdir_configdeploy_post:
    test: '[ ! -d /opt/elasticbeanstalk/hooks/configdeploy/post ]'
    command: "mkdir -p /opt/elasticbeanstalk/hooks/configdeploy/post"

  # Copy the scripts to stop/start datadog-agent to the respective elasticbeanstalk hooks folders.
  #  If the scripts exist in the hooks dir, datadog-agent will automatically start; only perform
  #  these commands if the env var DD_AGENT_ENABLED is set to `1`.
  10-configdeploy_pre_stop:
    test: '[ -n "${DD_AGENT_ENABLED:+x}" -a "${DD_AGENT_ENABLED}" = 1 ]'
    command: "cp /tmp/hooks/stop_datadog.sh /opt/elasticbeanstalk/hooks/configdeploy/pre/99_stop_datadog.sh"
  11-configdeploy_post_start:
    test: '[ -n "${DD_AGENT_ENABLED:+x}" -a "${DD_AGENT_ENABLED}" = 1 ]'
    command: "cp /tmp/hooks/start_datadog.sh /opt/elasticbeanstalk/hooks/configdeploy/post/99_start_datadog.sh"
  12-preinit_stop:
    test: '[ -n "${DD_AGENT_ENABLED:+x}" -a "${DD_AGENT_ENABLED}" = 1 ]'
    command: "cp /tmp/hooks/stop_datadog.sh /opt/elasticbeanstalk/hooks/preinit/99_stop_datadog.sh"
  13-postinit_start:
    test: '[ -n "${DD_AGENT_ENABLED:+x}" -a "${DD_AGENT_ENABLED}" = 1 ]'
    command: "cp /tmp/hooks/start_datadog.sh /opt/elasticbeanstalk/hooks/postinit/99_start_datadog.sh"
  14-restartappserver_pre_stop:
    test: '[ -n "${DD_AGENT_ENABLED:+x}" -a "${DD_AGENT_ENABLED}" = 1 ]'
    command: "cp /tmp/hooks/stop_datadog.sh /opt/elasticbeanstalk/hooks/restartappserver/pre/99_stop_datadog.sh"
  15-restartappserver_post_start:
    test: '[ -n "${DD_AGENT_ENABLED:+x}" -a "${DD_AGENT_ENABLED}" = 1 ]'
    command: "cp /tmp/hooks/start_datadog.sh /opt/elasticbeanstalk/hooks/restartappserver/post/99_start_datadog.sh"

  # The following commands append the primary datadog-agent config file to:
  #  add custom tags, enable the process agent, enable the trace agent, and
  #  enable log collection.
  20-set-tags-in-datadog-config-yaml:
    test: "[ -e /etc/datadog-agent/datadog.yaml ]"
    command: |
      sudo tee -a /etc/datadog-agent/datadog.yaml <<-TagConfig > /dev/null

      # Set the host's tags (optional)
      tags:
        - env:${RACK_ENV}
        - role:webapp
      TagConfig
  21-enable-datadog-process-agent:
    test: "[ -e /etc/datadog-agent/datadog.yaml ]"
    command: |
      sudo tee -a /etc/datadog-agent/datadog.yaml <<-ProcessAgentConfig > /dev/null

      # Process Agent Specific Settings
      process_config:
        enabled: true
      ProcessAgentConfig
  22-enable-datadog-trace-agent:
    test: "[ -e /etc/datadog-agent/datadog.yaml ]"
    command: |
      sudo tee -a /etc/datadog-agent/datadog.yaml <<-TraceAgentConfig > /dev/null

      # Trace Agent Specific Settings
      apm_config:
        enabled: true
        analyzed_spans:
          ${RACK_ENV}-rails-app|rack.request: 1
      TraceAgentConfig
  23-enable-datadog-log-collection:
    test: "[ -e /etc/datadog-agent/datadog.yaml ]"
    command: |
      sudo tee -a /etc/datadog-agent/datadog.yaml <<-LogCollectionConfig > /dev/null

      # Logs Agent
      logs_enabled: true
      LogCollectionConfig

  # Enable the nginx status check agent
  24-enable-datadog-nginx-status-check:
    test: '[ -d /etc/datadog-agent/conf.d ]'
    command: |
      sudo /tmp/write_datadog_confd.sh nginx <<-ConfFile
      # Nginx status endpoint
      instances:
        - nginx_status_url: http://localhost/nginx_status/
          tags:
            instance: "hirepool-${RACK_ENV}"
      ConfFile

  # Enable capture of ruby (rails application) logs.
  30-configure-datadog-ruby-log-capture:
    test: '[ -d /etc/datadog-agent/conf.d ]'
    ignoreErrors: true
    command: |
      sudo /tmp/write_datadog_confd.sh ruby <<-ConfFile
      # Log Information
      logs:

          # - type : file (mandatory) type of log input source (tcp / udp / file)
          #   port / path : (mandatory) Set port if type is tcp or udp. Set path if type is file
          #   service : (mandatory) name of the service owning the log
          #   source : (mandatory) attribute that defines which integration is sending the logs
          #   sourcecategory : (optional) Multiple value attribute. Can be used to refine the source attribtue
          #   tags: (optional) add tags to each logs collected

        - type: file
          path: /var/app/current/log/${RACK_ENV}.log
          service: ${RACK_ENV}-rails-app
          source: ruby
          sourcecategory: sourcecode
          # For multiline logs, if they start with a timestamp with format yyyy-mm-dd
          # uncomment the below processing rule log_processing_rules:
          #   - type: multi_line
          #     pattern: \d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])
          #     name: new_log_start_with_date
      ConfFile

  # Enable capture of puma application server logs.
  31-configure-datadog-puma-log-capture:
    test: '[ -d /etc/datadog-agent/conf.d ]'
    ignoreErrors: true
    command: |
      sudo /tmp/write_datadog_confd.sh puma <<-ConfFile
      # Log Information
      logs:

          # - type : (mandatory) type of log input source (tcp / udp / file)
          #   port / path : (mandatory) Set port if type is tcp or udp. Set path if type is file
          #   service : (mandatory) name of the service owning the log
          #   source : (mandatory) attribute that defines which integration is sending the logs
          #   sourcecategory : (optional) Multiple value attribute. Can be used to refine the source attribtue
          #   tags: (optional) add tags to each logs collected

        - type: file
          path: /var/log/puma/puma_access.log
          service: ${RACK_ENV}-rails-app
          source: puma
          sourcecategory: rack_webserver

        - type: file
          path: /var/log/puma/puma_error.log
          service: ${RACK_ENV}-rails-app
          source: puma
          sourcecategory: rack_webserver
      ConfFile

  # Enable capture of nginx web server logs.
  32-configure-datadog-nginx-log-capture:
    test: '[ -e /etc/datadog-agent/conf.d/nginx.d/conf.yaml ]'
    command: |
      sudo tee -a /etc/datadog-agent/conf.d/nginx.d/conf.yaml <<-ConfFile > /dev/null

      #Log section
      logs:

          # - type : (mandatory) type of log input source (tcp / udp / file)
          #   port / path : (mandatory) Set port if type is tcp or udp. Set path if type is file
          #   service : (mandatory) name of the service owning the log
          #   source : (mandatory) attribute that defines which integration is sending the logs
          #   sourcecategory : (optional) Multiple value attribute. Can be used to refine the source attribtue
          #   tags: (optional) add tags to each logs collected

        - type: file
          path: /var/log/nginx/access.log
          service: ${RACK_ENV}-rails-app
          source: nginx
          sourcecategory: http_web_access

        - type: file
          path: /var/log/nginx/error.log
          service: ${RACK_ENV}-rails-app
          source: nginx
          sourcecategory: http_web_access
      ConfFile
