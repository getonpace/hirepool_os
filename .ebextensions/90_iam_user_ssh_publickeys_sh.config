files:
  "/opt/elasticbeanstalk/support/scripts/iam_user_ssh_publickeys.sh":
    mode: "000755"
    content: |
      #!/usr/bin/env bash

      set -e

      # Set flag to persist $IAM_GROUP_NAME after exit
      #
      if [ $IAM_GROUP_NAME ]; then __KEEP_GROUP_NAME=1; fi

      function _cleanup()
      {
        if [ -e "$TEMP_SSH_KEYS_FILE" ]; then rm -rf "$TEMP_SSH_KEYS_FILE" >&2; fi
        if [ -z ${__KEEP_GROUP_NAME} ]; then unset -v IAM_GROUP_NAME; fi

        unset -v \
          __KEEP_GROUP_NAME \
          line \
          SSH_USER \
          SSH_KEYS_FILE \
          TEMP_SSH_KEYS_FILE \
          MARKER \
          User \
          PublicKeyIds \
          KeyId \
          PublicKey

        unset -f \
          getIamUsers \
          _sshd_config_authorizedkeysfile \
          _ssh_user_homedir \
          _usage _cleanup

        return 0
      }


      # Clear out nested functions on exit
      #
      trap _cleanup INT EXIT RETURN


      # Get the value of AuthorizedKeysFile from sshd_config
      #
      function _sshd_config_authorizedkeysfile ()
      {
        echo $( sshd -T 2>/dev/null | grep authorizedkeysfile | cut -d' ' -f2 )
      }


      # Get the $HOME dir for $SSH_USER if set, otherwise for $USER
      #
      function _ssh_user_homedir ()
      {
        if [ -z $SSH_USER ]; then
          echo $HOME
        else
          echo $( getent passwd $SSH_USER | cut -d: -f6 )
        fi
      }


      # Display script usage
      #
      function _usage()
      {
        ###### U S A G E : Help and ERROR ######
        cat <<EOF
         iam_user_ssh_publickeys.sh $OPTIONS
         $*
            Usage: iam_user_ssh_publickeys.sh <[options]>
            Options:
                -g   --iam-group-name=<NAME>            Optionally specify an IAM group name to filter users by NAME. If left unset, all IAM users will be considered.
                                                          _NOTE:_ The environment variable \$IAM_GROUP_NAME will take precendence over this option, if set.
                -k   --ssh-authorized-keys=<FILENAME>   Specify the filename which contains authorized_keys for SSH. (DEFAULT: $( _sshd_config_authorizedkeysfile ))
                -s   --ssh-user=<USER_NAME>             Specify a local ssh user for which to add authorized keys. (DEFAULT: $USER)
                                                          _NOTE:_ The environment variable \$SSH_USER will take precendence over this option, if set.
                -h   --help                             Show this message

      EOF
      }


      # Check for aws cli before running script
      #
      if ! [ -x "$( command -v aws )" ]; then
        echo "aws executable not found. Aborting!" >&2
        exit 1
      fi


      # Check for config options and environment variables
      #

      # Set defaults
      [ -z $SSH_USER ]      && SSH_USER=$USER
      [ -z $SSH_KEYS_FILE ] && SSH_KEYS_FILE=$( _sshd_config_authorizedkeysfile )

      # Parse options
      while getopts ':g:s:k:vh-' OPTION; do
        case "$OPTION" in
          g  )  [ -z $IAM_GROUP_NAME ] && IAM_GROUP_NAME=${OPTARG} ;;
          s  )  [ -z $SSH_USER ]       && SSH_USER=${OPTARG}       ;;
          k  )  SSH_KEYS_FILE=${OPTARG}  ;;
          v  )  VERBOSE=1                ;;
          h  )  _usage                   ;;
          -  )  [ $OPTIND -ge 1 ] && optind=$(expr $OPTIND - 1 ) || optind=$OPTIND
                eval OPTION="\$$optind"
                OPTARG=$(echo $OPTION | cut -d'=' -f2)
                OPTION=$(echo $OPTION | cut -d'=' -f1)
                case $OPTION in
                  --iam-group-name      ) [ -z $IAM_GROUP_NAME ] && IAM_GROUP_NAME=${OPTARG} ;;
                  --ssh-user            ) [ -z $SSH_USER ]       && SSH_USER=${OPTARG}       ;;
                  --ssh-authorized-keys ) SSH_KEYS_FILE=${OPTARG}   ;;
                  --vebose              ) VERBOSE=1                 ;;
                  --help                ) _usage                    ;;
                  * ) _usage "Invalid option: -$OPTARG\n" >&2 ; exit 1  ;;
                esac
                OPTIND=1
                shift
                ;;
          \? )  _usage "Invalid option: -$OPTARG\n" >&2 ; exit 1 ;;
          :  )  _usage "Option -$OPTARG requires an argument.\n" >&2 ; exit 1 ;;
        esac
      done

      SSH_KEYS_FILE="$( _ssh_user_homedir )/$SSH_KEYS_FILE"
      TEMP_SSH_KEYS_FILE=$( mktemp ${SSH_KEYS_FILE}.XXXXXX )
      MARKER="### KEYS BELOW ARE AUTO-GENERATED FROM IAM -- DO NOT EDIT MANUALLY ###"


      # Get a list of IAM users for which to iterate over. The first argument is
      #   assumed to be an IAM Group name for which to filter Users by.
      #
      function getIamUsers()
      {
        local username_q="Users[].[UserName]"

        if [ ${IAM_GROUP_NAME} ]; then
          echo $( aws iam get-group \
            --group-name $IAM_GROUP_NAME \
            --query $username_q \
            --output text )
        else
          echo $( aws iam list-users \
            --query $username_q \
            --output text )
        fi
      }


      # Ensure that $KEY_FILE exists and is writable
      #
      ( [ -e "$SSH_KEYS_FILE" ] || touch "$SSH_KEYS_FILE" 2>/dev/null ) && \
        [ ! -w "$SSH_KEYS_FILE" ] && { echo "Cannot write to $SSH_KEYS_FILE" >&2; exit 1; }


      # Add marker to $SSH_KEYS_FILE, if not present,
      #   and copy initial content to $TEMP_SSH_KEYS_FILE.
      #
      grep -Fxq "$MARKER" $SSH_KEYS_FILE || echo -e "\n$MARKER" >> $SSH_KEYS_FILE
      line=$( grep -n "$MARKER" $SSH_KEYS_FILE | cut -d ":" -f 1 )
      head -n $line $SSH_KEYS_FILE > $TEMP_SSH_KEYS_FILE


      # Iterate through the users in the IAM group, collect their active
      #   SSH public keys, and append them to the authorized_keys.
      #
      for User in $( getIamUsers ); do
        PublicKeyIds=$( aws iam list-ssh-public-keys \
          --user-name "$User" \
          --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" \
          --output text )

        for KeyId in $PublicKeyIds; do
          PublicKey=$( aws iam get-ssh-public-key \
            --user-name "$User" \
            --ssh-public-key-id "$KeyId" \
            --encoding SSH \
            --query "SSHPublicKey.SSHPublicKeyBody" \
            --output text )

          echo -e "\n$PublicKey $User" >> $TEMP_SSH_KEYS_FILE
        done
      done


      # Move the new authorized keys in place
      #
      mv $TEMP_SSH_KEYS_FILE $SSH_KEYS_FILE
      chown $SSH_USER:$SSH_USER $SSH_KEYS_FILE
      chmod 600 $SSH_KEYS_FILE
      if [ -x "$( command -v selinuxenabled )" ]; then restorecon -R -v $SSH_KEYS_FILE >&2; fi

      # Exit cleanly
      #
      exit 0

  "/opt/elasticbeanstalk/hooks/preinit/08_add_iam_group_ssh_publickeys.sh":
    mode: "000755"
    content: |
      #!/usr/bin/env bash

      set -xe

      SSH_USER="ec2-user"
      IAM_GROUP_NAME="hirepool_dev"
      ADD_PUBLICKEYS_SCRIPT="/opt/elasticbeanstalk/support/scripts/iam_user_ssh_publickeys.sh"

      if [ -e ${ADD_PUBLICKEYS_SCRIPT} ]; then
        ${ADD_PUBLICKEYS_SCRIPT} \
          --ssh-user="$SSH_USER" \
          --iam-group-name="$IAM_GROUP_NAME"
      fi

container_commands:
  01_add_iam_group_ssh_publickeys:
    env:
      IAM_GROUP_NAME: hirepool_dev
      SSH_USER: ec2-user
    cwd: /home/ec2-user
    command: /opt/elasticbeanstalk/support/scripts/iam_user_ssh_publickeys.sh
    test: "[ -e \"/opt/elasticbeanstalk/support/scripts/iam_user_ssh_publickeys.sh\" ]"