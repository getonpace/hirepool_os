container_commands:
  01_backup_config:
    # Copy the original `pumaconf.rb` config, unless an original backup already exists (the `-n` option).
    command: |
      sudo cp -n /opt/elasticbeanstalk/support/conf/pumaconf.rb \
                 /opt/elasticbeanstalk/support/conf/pumaconf.rb.original
  02_edit_config:
    # The following one-liner utilizes shell pipes (|) from stdout to stdin to manipulate the contents of the `pumaconf.rb`
    # file line-by-line. See: (https://github.com/puma/puma/blob/master/examples/config.rb) for more information on the
    # puma config file and various options.
    #
    # Here is a breakdown of each piped segment of the command:
    #  1) `cat /opt/elasticbe...`     - Start with the contents of the original config, dumping it to stdout.
    #  2) `sed '/directory/ a\rackup` - Append the `rackup ...` option after the `directory` option, explicitly specifying
    #                                   the default Rackup file (`/config.ru`).
    #  3) `sed '/rackup/ a\enviro...` - Append the `environment ...` option after the `rackup` option, explicitly setting it to
    #                                   the `RACK_ENV` ENV var, if it exists, and otherwise falling back on `'production'`.
    #  4) `sed -r 's/^(thread...'`    - Set a `max_threads` variable from the `RAILS_MAX_THREADS` ENV var, and update the `threads`
    #                                   config option by replacing the hard-coded '32' with that `max_threads` variable.
    #  5) `sed 's/%x(grep -c ...'`    - Update the `workers` option to use the `WEB_CONCURRENCY` ENV var, if set, falling back on
    #                                   thevalue of the number of CPU cores of the running instance (as in the original config).
    #  6) `sed -r '/stdout_re...'`    - Split the puma logs into `puma_access.log` and `puma_error.log` (the original config
    #                                   combines these two logs into a single `puma.log` file).
    #  7) `printf...'preload_app!'`   - Add the 'preload_app!' directive, to load application code _prior_ to forking new workers.
    #  8) `printf...on_restart/do`    - Append code-block to run on puma restart; in this case, ensure the `Gemfile` gets reloaded.
    #  9) `printf...on_worker_boot/do - Append code-block to run when puma forks a new worker; in this case, ensure that each
    #                                   forked worker establishes a new database connection pool for ActiveRecord.
    # 10) `sudo tee ...`              - Write the final version from stdout into a new `pumaconf.rb` file (the original was backed up earlier).
    command: |
      cat /opt/elasticbeanstalk/support/conf/pumaconf.rb.original \
        | sed '/directory/ a\rackup DefaultRackup' \
        | sed '/rackup/ a\environment (ENV[\x27RACK_ENV\x27] || 'production')' \
        | sed -r 's/^(threads [[:digit:]]+,) ([[:digit:]]+)/\nmax_threads = ENV[\x27RAILS_MAX_THREADS\x27] || \2\n\1 max_threads/' \
        | sed 's/%x(grep -c processor \/proc\/cpuinfo)/(ENV[\x27WEB_CONCURRENCY\x27] || &)\n/' \
        | sed -r '/stdout_redirect/ s/(puma)\.(.*)(puma)\.(.*)/\1_access.\2\3_error.\4\n/' \
        | printf "%s\n\n%s\n" "$(cat -)" 'preload_app!' \
        | printf "%s\n\n%s\n%s\n%s\n%s\n" "$(cat -)" \
          "on_restart do" \
          "  puts 'Refreshing Gemfile'" \
          "  ENV['BUNDLE_GEMFILE'] = '/var/app/current/Gemfile'" \
          "end" \
        | printf "%s\n\n%s\n%s\n%s\n%s\n%s\n" "$(cat -)" \
          "on_worker_boot do" \
          "  ActiveSupport.on_load(:active_record) do" \
          "    ActiveRecord::Base.establish_connection" \
          "  end" \
          "end" \
        | sudo tee /opt/elasticbeanstalk/support/conf/pumaconf.rb